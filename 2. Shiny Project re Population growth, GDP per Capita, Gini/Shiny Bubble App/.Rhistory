min(Chile$age, na.rm = T)
max(Chile$age, na.rm = T)
age.c <- cut(Chile$age, c(20, 40, 60, 80))
table(Chile$vote, age.c)
age.c <- cut(Chile$age, c(20, 30, 40, 50, 60, 70, 80))
table(Chile$vote, age.c)
table(Chile$vote, Chile$education)
?Chile
table(Chile$vote, Chile$education, Chile$region)
table(Chile$vote, quantileCut(Chile$income, 4))
age.c <- cut(Chile$age, c(20, 30, 40, 50, 60, 70, 80))
table(Chile$vote, age.c)
age.c <- cut(Chile$age, c(20, 30, 40, 50, 60, 70))
table(Chile$vote, age
age.c <- cut(Chile$age, c(20, 30, 40, 50, 60, 70))
table(Chile$vote, age.c)
library(car)
quantile(Chile$income, na.rm = TRUE)
?sep
?read.tabke
?read.table
snee <- read.table("http://www.biostatisticien.eu/springeR/snee74en.txt")
head(snee)
nrow(snee)
snee <- read.table("http://www.biostatisticien.eu/springeR/snee74en.txt", header = T)
nrow(snee)
head(snee)
ncol(snee)
lappy(snee, type)
lapply(snee, type)
lapply(snee, class)
sapply(snee, class)
plot(snee)
table(snee)
table(snee$hair)
table(snee$eyes)
table(snee$gender)
library(ggplot2)
ggplot(snee, aes(x=hair, y=eyes, fill=gender)) +
geom_bar(position = "dodge", colour="black", stat="identity")
mosaic(~hair+gender+eyes, data=snee, highlighting="eyes", highlighting_fill=
c("blue", "pink"), direction=c("v", "v", "h"))
mosaicplot(snee)
mosaicplot(table(snee))
mosaicplot(dimnames(snee))
mosaicplot(dimnames(snee))
mosaicplot(table(snee))
library(vcd)
mosaic(snee)
mosaic(table(snee))
?mosaic
mosaic(table(snee), highlighting = gender)
mosaic(table(snee), highlighting = snee$gender)
mosaic(table(snee), highlighting = "gender")
?mosaic
mosaic(table(snee), highlighting = "gender", panel = observed)
mosaic(table(snee), highlighting = "gender", panel = "observed")
?mosaic
mosaic(table(snee), highlighting = "gender", panel = expected)
?labeling_cells
mosaic(table(snee), highlighting = "gender")
labeling_cells()
?labeling_cells
mosaic(table(snee), highlighting = "gender", labeling = labeling_cells)
?labeling_cells
mosaic(table(snee), highlighting = "gender", labeling = labeling_llist)
?labeling_cells
count(snee)
counts(snee)
library(plyr)
count(snee)
counts <- count(snee)
mosaic(table(snee), highlighting = "gender")
labeling_cells(text = counts, margin = 0)(snee)
counts <- count(snee)
mosaic(table(snee), highlighting = "gender")
labeling_cells(text = counts, margin = 0)(snee)
mosaic(table(snee), highlighting = "gender", labeling=labeling_values
)
mosaic(table(snee), highlighting = "gender", labeling=labeling_residuals())
mosaic(table(snee), highlighting = "gender", labeling=labeling_cells)
?labeling_values
round(prop.table(snee), 2)
labs <- round(prop.table(snee), 2)
mosaic(snee, pop = FALSE)
labeling_cells(text = labs, margin = 0)(snee)
prop.table(snee)
labs <- percentages.table(snee)
mosaic(snee, pop = FALSE)
labeling_cells(text = labs, margin = 0)(snee)
ftable(snee)
xtabs(snee)
prop.table(snee)
prop.table(table(snee))
percentages.table(table(snee))
percentage.table(table(snee))
round(prop.table(table(snee)*100)
)
round(prop.table(table(snee))
)
prop.table(table(snee))*100
round(prop.table(table(snee))*100)
round(prop.table(table(snee))*100)
perc <- round(prop.table(table(snee))*100)
mosaic(snee, pop = FALSE)
labeling_cells(text = perc, margin = 0)(snee)
perc <- round(prop.table(table(snee))*100)
mosaic(snee)
labeling_cells(text = perc, margin = 0)(snee)
mosaic(table(snee), highlighting = "gender", labeling = round(prop.table(table(snee))*100)
)
mosaic(table(snee), highlighting = "gender", labeling = labeling_values(round(prop.table(table(snee))*100)))
perc <- round(prop.table(table(snee))*100))
mosaic(snee, pop = FALSE)
labeling_cells(text = perc, margin = 0)(snee)
perc <- round(prop.table(table(snee))*100)
perc
mosaic(snee, pop = FALSE)
labeling_cells(text = perc, margin = 0)(snee)
perc <- round(prop.table(table(snee))*100)
mosaic(table(snee))
labeling_cells(text = perc, margin = 0)(snee)
perc <- round(prop.table(table(snee))*100)
mosaic(table(snee))
labeling_cells(text = perc, margin = 0)(table(snee))
perc <- round(prop.table(table(snee))*100)
mosaic(table(snee))
labeling_cells(text = perc)(table(snee))
mosaic(table(snee), highlighting = "gender", labeling = labeling_values/592)
mosaic(table(snee), highlighting = "gender", labeling = labeling_values)
perc <- round(prop.table(table(snee))*100)
round(prop.table(table(snee))*100)
sum(snee)
sum(table(snee))
prop.table(table(nee))
prop.table(table(snee))
round(prop.table(table(snee)))
round(prop.table(table(snee)), 2)
table(snee)
table(snee$hair, snee$eyes)
prop.table(table(snee$hair, snee$eyes))
round(prop.table(table(snee$hair, snee$eyes), 2))
round(prop.table(table(snee$hair, snee$eyes)), 2)
xtabs(snee)
with(snee, xtabs(~ eyes + hair + gender))
table(snee)
table(snee$hair, snee$eyes)
round(prop.table(table(snee$hair, snee$eyes)), 2)*592
sum(round(prop.table(table(snee$hair, snee$eyes)), 2)*592)
sum(prop.table(table(snee$hair, snee$eyes))*592)
prop.table(table(snee$hair, snee$eyes))*592
table(snee$hair, snee$eyes)
observed = table(snee$eyes, snee$hair)
(rowSums(observed) %*% t(colSums(observed)))/nrow(snee)
observed
rowSums(observed) %*% t(colSums(observed))
(rowSums(observed) %*% t(colSums(observed)))
rowSums(observed)
colSums(observed)
observed
prop.table(table(snee$hair, snee$eyes)
)
prop.table(table(snee$hair, snee$eyes))*592
?t
chisq.test(table(snee$hair, snee$eyes))
t$expected
t <- chisq.test(table(snee$hair, snee$eyes))
t$expected
?chisq.test
(rowSums(observed)/592 * t(colSums(observed))/592) * nrow(snee)
(rowSums(observed)/592 %*% t(colSums(observed))/592) * nrow(snee)
table(snee$eyes, snee$hair)/nrow(snee)
round(prop.table(table(snee$hair, snee$eyes)), 2)
haireyes <- table(snee$hair, snee$eyes)
chisq.test(haireyes)
chisq.test(haireyes)$expected
haireyes
haireyesexpected <- chisq.test(haireyes)$expected
(haireyes - haireyesexpected)^2
observed = table(snee$eyes, snee$hair)
observed
###Part 5
table(snee$eyes, snee$hair)/nrow(snee)
###Part 6
expected = (rowSums(observed) %*% t(colSums(observed)))/nrow(snee)
expected
###Part 7
(observed - expected)^2
sum((observed - expected)^2/expected)
(haireyes - haireyesexpected)^2
chisq.test(haireyes)
(haireyes - haireyesexpected)^2
install.packages("mlbench")
library(mlbench)
diab <- data(PimaIndiansDiabetes2)
head(diab)
diab <- data("PimaIndiansDiabetes2")
head(diab)
diab <- PimaIndiansDiabetes2
head(diab)
sapply(diab, class)
sapply(diab, is.na)
sapply(diab, sum(is.na))
sapply(diab, count(is.na))
sapply(diab, sum(length(is.na)))
lapply(diab, sum(length(is.na)))
colSums(is.na(diab))
sapply(diab, class)
str(dia)
str(diab)
summary(diab)
library(car)
scatterplotMatrix(diab)
scatterplotMatrix(diab,
diagonal='histogram',
ellipse=TRUE)
scatterplotMatrix(diab[ ,-9],
diagonal='histogram',
ellipse=TRUE)
diab[ , -9]
head(diab)
?scatterplotMatrix
scatterplotMatrix(diab[ ,-9],
diagonal='histogram',
ellipse=TRUE)
?scatterplotMatrix
library(GGally)
ggpairs(data)
install.packages(GGally)
install.packages("GGally")
library(GGally)
ggpairs(data)
library(GGally)
ggpairs(diab)
scatterplotMatrix(diab[ ,-9],
diagonal='histogram',
ellipse=TRUE)
pairs(PimaIndiansDiabetes2[,-9])
scatterplotMatrix(diab[ ,-9],
diagonal='histogram',
ellipse=TRUE)
nrow(diab)
str(diab)
summary(diab)
library(lattice)
splom(diab[1:8])
boxplot(log(diab[,-9]))
plot(diab[, -9])
scatterplotMatrix(diab[ ,-9],
diagonal='histogram',
ellipse=TRUE)
boxplot(diab)
boxplot(diab$pregnant, diab$diabetes)
?cor
cor(.~, diab$diabetes)
scatterplotMatrix(diab)
scatterplotMatrix(diab, diagonal='histogram',
)
plot(diab)
install.packages("hexbin")
library(hexbin)
hexbin(diab)
plot(hexbin(diab))
pairs(diab)
splom(diab)
install.packages("gclus")
library("gclus")
diabcor <- abs(cor(diab)) # get correlations
diabcol <- dmat.color(diabcor) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
diabor <- order.single(diabcor)
cpairs(diab, diabor, panel.colors=diabcol, gap=.5)
diabcor <- abs(cor(diab))
cpairs(diab)
?cpairs
cor(diab)
cor(as.numeric(diab))
diab2 <- diab[,-9]
head(diab2)
sapply(diab2, class)
diabcor <- abs(cor(diab2)) # get correlations
diabcol <- dmat.color(diabcor) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
diabor <- order.single(diabcor)
cpairs(diab2, diabor, panel.colors=diabcol, gap=.5)
diabor <- order.single(diabcor)
diabor <- order.single(diabcor, na.rm=T)
cpairs(diab2, panel.colors=diabcol, gap=.5)
cor(diab2)
diab3 <- as.numeric[diab$diabetes]
diab3 <- as.numeric(diab$diabetes)
diab3
diab$diabetes <- as.numeric(diab$diabetes)
diabcor <- abs(cor(diab)) # get correlations
diabcol <- dmat.color(diabcor) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
diabor <- order.single(diabcor, na.rm=T)
cpairs(diab2, panel.colors=diabcol, gap=.5)
diabcor <- abs(cor(diab)) # get correlations
diabcol <- dmat.color(diabcor) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
diabor <- order.single(diabcor, na.rm=T)
cpairs(diab, panel.colors=diabcol, gap=.5)
cor(diab)
cor(diab, na.rm=T)
cor(diab, na.rm=True)
cor(diab, na.rm=TRUE)
cor(dian, use = "na.or.complete")
cor(diab, use = "na.or.complete")
cor(diab, use = "complete")
diabcor <- abs(cor(diab, use = "complete")) # get correlations
diabcol <- dmat.color(diabcor) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
diabor <- order.single(diabcor, na.rm=T)
cpairs(diab2, panel.colors=diabcol, gap=.5)
diabcor <- abs(cor(diab, use = "complete")) # get correlations
diabcol <- dmat.color(diabcor) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
diabor <- order.single(diabcor, na.rm=T)
cpairs(diab, panel.colors=diabcol, gap=.5)
?cpairs
?order.single
diabcor <- abs(cor(diab, use = "complete")) # get correlations
diabcol <- dmat.color(diabcor) # get colors
# reorder variables so those with highest correlation
# are closest to the diagonal
diabor <- order.single(diabcor)
cpairs(diab, panel.colors=diabcol, gap=.5)
diabcol
diabor
diabcor <- abs(cor(diab, use = "na.or.complete"))
diabcol <- dmat.color(diabcor) # get colors
diabor <- order.single(diabcor)
cpairs(diab, panel.colors=diabcol, gap=.5)
cor(diab, use = "na.or.complete")
plot(diab)
diabcol
diabcor <- abs(cor(diab, use = "na.or.complete"))
diabcol <- dmat.color(diabcor)
cpairs(diab, panel.colors=diabcol, gap=.5)
?cpairs
diabcor <- abs(cor(diab, use = "na.or.complete"))
diabcol <- dmat.color(diabcor)
cpairs(diab, panel.colors=diabcol)
cor(diab[,unlist(lapply(diab, is.numeric))])
cor(diab[,unlist(lapply(diab, is.numeric))], use = "na.or.complete")
library(psych)
corr.test(diab)
?corr.test
cor(diab, use = "na.or.complete")
model = glm(diabetes ~ ., family = "binomial", data = diab)
summary(model)
diab <- PimaIndiansDiabetes2
model = glm(diabetes ~ ., family = "binomial", data = diab)
summary(model)
pairs.panels(diab)
?pairs.panels
pairs.panels(diab)
diab$diabetes <- as.numeric(diab$diabetes)
cor(diab, use = "na.or.complete")
diab <- PimaIndiansDiabetes2
model = glm(diabetes ~ ., family = "binomial", data = diab)
summary(model)
table(diab)
model = glm(diabetes ~ ., family = "binomial", data = diab)
summary(model)
exp(coef(model))
?diab
exp(1.141)
exp(coef(model))/exp(coef(model))+1
(exp(coef(model)))/(exp(coef(model)))+1
exp(coef(model))
odds <- exp(coef(model))
exp(coef(model))/((exp(coef(model)))+1)
odds/((exp(coef(model)))+1)
exp(1.141)
3.12/(3.12+1)
odds/(odds+1)
odds
(odds)/(odds+1)
3.12/(3.12+1)
1/(1 + exp(-(sum(odds)
)
)
)
lapply(odds, (odds)/(odds+1))
odds/(odds+1)
predict(model, odds, type="response")
predict(model, model, type="response")
predict(odds, odds, type="response")
odds/odds+1
odds/(odds+1)
(odds)/(odds+1)
?predict.glm
predict.glm(diabetes ~ ., family = "binomial", data = diab)
odds <- exp(coef(model))
odds
3.129611/(3.129611+1)
scale(diab[-9])
?scale
anova(model, test = "Chi")
model = glm(diabetes ~ ., family = "binomial", data = diab)
anova(model, test = "Chi")
model
predict(model, type = "response")
knn(diab)
library(VIM)
kNN(diab)
diab2 <- kNN(diab)
head(diab)
head(diab2)
diabnorm <- scale(diab[-9])
diab2 <- kNN(diabnorm)
head(diab2)
diabnorm <- scale(diab[-9])
# Impute the NAs using knn
library(VIM)
diab2 <- kNN(diabnorm)
head(diab2)
kNN(diab)
diab2 <- kNN(diab)
head(diab2)
kNNimpute(diab)
?kNN
kNN(diab, impNA = T)
kNN(diab, impNA = F)
kNN(diab, impNA = TRUE)
data(sleep)
kNN(sleep)
diabnorm <- scale(diab[-9])
# Impute the NAs using knn
library(VIM)
diab2 <- kNN(diabnorm)
head(diab2)
tail(diab2)
diab2 <- kNN(diab)
head(diab2)
diab2 <- kNN(diab)
aggr(diab2, delimiter="_imp")
kNN(sleep)
impute.kNN(diab)
kNN(diab, k)
summary(kNN(diab))
kNN(diab, k=1)
?kNN
diabnorm <- scale(diab[-9])
# Impute the NAs using knn
library(VIM)
kNN(diab)
sum(is.na(diab))
diab <- PimaIndiansDiabetes2
sum(is.na(diab))
diab <- kNN(diab)
sum(is.na(diab))
head(diab)
diab <- PimaIndiansDiabetes2
diab2 <- kNN(diab)
diab2 <- kNN(diabnorm)
diab <- PimaIndiansDiabetes2
diabnorm <- scale(diab[-9])
diab2 <- kNN(diabnorm)
diab2
names(diab2)
sum(is.na(diab2))
model = glm(diabetes ~ ., family = "binomial", data = diab)
summary(model)
library(MASS)
model = lm(medv ~ lstat, data = Boston)
model2 = lm(log(medv) ~ lstat, data = Boston)
summary(model2)
acf(model2$residuals)
acf(model$residuals)
library(car)
influenceplot(model)
influencePlot(model)
influencePlot(model2)
par(mfrow=c(5, 5))
plot(model)
plot(model$residuals ~ Boston$lstat)
plot(model2)
plot(model2$residuals ~ Boston$lstat)
par(mfrow=c(3, 4))
plot(model)
plot(model$residuals ~ Boston$lstat)
plot(model2)
plot(model2$residuals ~ Boston$lstat)
summary(model)
summary(model2)
model3 = lm(medv ~ lstat+age, data = Boston)
model4 = lm(log(medv) ~ lstat+age, data = Boston)
summary(model3)
colnames(Boston)
summary(model4)
shiny::runApp('C:/Users/Administrator/Desktop/Data Science/NYC Data Science Academy/Boot Camp/2. Sara Zeid Shiny Project re Population growth, GDP per Capita, Gini/Shiny Bubble App')
setwd("C:/Users/Administrator/Desktop/Data Science/NYC Data Science Academy/Boot Camp/2. Sara Zeid Shiny Project re Population growth, GDP per Capita, Gini/Shiny Bubble App")
region <- readRDS("Data/region.RDS")
income <- readRDS("Data/income.RDS")
gini <- readRDS("Data/gini.RDS")
grouping <- readRDS("Data/grouping.RDS")
reginc <- readRDS("Data/regionandincome.RDS")
library(ggplot2)
library(dplyr)
library(googleVis)
library(shiny)
library(DT)
shiny::runApp()
